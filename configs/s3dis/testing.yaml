model:
  channels: 32 # number of feature maps (filters)
  num_blocks: 7 #layers in the neural network model
  semantic_classes: 3
  instance_classes: 2 # 2 to 3
  sem2ins_classes: []
  semantic_only: False
  semantic_weight: False
  with_coords: True
  ignore_label: -100
  voxel_scale: 5
  use_spp_pool: True
  filter_bg_thresh: 0.4 # 0.02 to 3
  iterative_sampling: True
  instance_head_cfg:
    num_dyco_layer: 2 # 3 the weight and bias configurations are calculated based on
    dec_dim: 128
    n_sample_pa1: 4096   # 2048
    n_queries: 512   # 256
    radius_scale: 1
    radius: 0.4
    neighbor: 32
  test_cfg:
    x4_split: True
    logit_thresh: 0.0
    score_thresh:  0.4 # 0.3
    npoint_thresh: 100 #1000
    type_nms: 'standard'
    topk: -1
    nms_threshold: 0.1

  fixed_modules: ['input_conv', 'unet', 'output_layer', 'semantic_linear', 'offset_linear', 'offset_vertices_linear', 'box_conf_linear']

data:
  train:
    type: 's3dis'
    data_root: 'dataset/s3dis/'
    prefix: ['Area_1']
    suffix: '_inst_nostuff'
    repeat: 20
    training: True
    voxel_cfg:
      scale: 50
      spatial_shape: [128, 512]
      max_npoint: 250000
      min_npoint: 50
  test:
    type: 's3dis'
    data_root: 'dataset/s3dis/'
    prefix: 'Area_5'
    suffix: '_inst_nostuff'
    training: False
    voxel_cfg:
      scale: 5
      spatial_shape: [128, 256] # [128, 512]
      max_npoint: 300000
      min_npoint: 50


dataloader:
  train:
    batch_size: 4
    num_workers: 0
  test:
    batch_size: 1
    num_workers: 0

optimizer:
  type: 'AdamW'
  lr: 0.00001 
  weight_decay: 0.0001

save_cfg:       
  semantic: False
  offset: False
  instance: True
  offset_vertices: False
  nmc_clusters: False
  object_conditions: False

fp16: False  # Temporarily disable mixed precision
epochs: 120
step_epoch: 50
save_freq: 4
pretrain: 'pretrains/s3dis/epoch_120.pth'
work_dir: ''

# MUCov is like a score that tells you how much of the important stuff (relevant items)
# the model successfully included in its clusters. The higher the score, 
# the better the model is at finding 
# the right items and putting them into the correct groups.
